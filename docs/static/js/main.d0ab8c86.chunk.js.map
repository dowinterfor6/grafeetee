{"version":3,"sources":["components/Canvas.jsx","components/Sidebar.jsx","components/App.jsx","index.js"],"names":["Canvas","state","SPRAY_PAINT","canvasRef","useRef","useState","mouseX","setMouseX","mouseY","setMouseY","context","setContext","useEffect","current","width","offsetWidth","height","offsetHeight","getContext","className","id","ref","onMouseMove","e","clientX","clientY","buttons","activeTool","beginPath","strokeStyle","color","arc","Math","PI","fillStyle","fill","stroke","Sidebar","dispatch","SET_COLOR","SET_TOOL","minimized","setMinimized","openColorPicker","setOpenColorPicker","setColor","sprayPaintRef","colorPaletteRef","componentRefs","handleClickSelection","classList","dataset","type","payload","tool","forEach","remove","add","onClick","icon","faMinus","size","currentTarget","data-tool","faSprayCan","faPalette","onChange","hex","download","canvas","document","getElementById","href","toDataURL","faSave","App","initialState","useReducer","action","Object","freeze","nextState","assign","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d0ab8c86.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nconst Canvas = ({ state, SPRAY_PAINT }) => {\n  const canvasRef = useRef();\n  const [mouseX, setMouseX] = useState(0);\n  const [mouseY, setMouseY] = useState(0);\n  const [context, setContext] = useState();\n\n  // temp\n  const radius = 10;\n\n  useEffect(() => {\n    canvasRef.current.width = canvasRef.current.offsetWidth;\n    canvasRef.current.height = canvasRef.current.offsetHeight;\n\n    setContext(canvasRef.current.getContext(\"2d\"));\n  }, []);\n\n  const handleSprayPaint = (e) => {\n    // TODO: for non 100% hardness, allow on same spot\n    setMouseX(e.clientX);\n    setMouseY(e.clientY);\n    if (e.buttons !== 1 || state.activeTool !== SPRAY_PAINT) return;\n\n    if (context) {\n      context.beginPath();\n      context.strokeStyle = state.color;\n      context.arc(mouseX, mouseY, radius, 0, 2 * Math.PI);\n      context.fillStyle = state.color;\n      context.fill();\n      context.stroke();\n    }\n  };\n\n  return (\n    <section className=\"canvas-container\">\n      <canvas id=\"canvas\" ref={canvasRef} onMouseMove={handleSprayPaint} />\n    </section>\n  )\n}\n\nexport default Canvas;\n","import { faArrowsAlt, faMinus, faPalette, faSave, faSprayCan } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useRef, useState } from 'react';\nimport { ChromePicker } from 'react-color';\n\nconst Sidebar = ({ dispatch, SET_COLOR, SET_TOOL, SPRAY_PAINT }) => {\n  const [minimized, setMinimized] = useState(false);\n  const [openColorPicker, setOpenColorPicker] = useState(false);\n  const [color, setColor] = useState('#000');\n\n  const sprayPaintRef = useRef();\n  const colorPaletteRef = useRef();\n\n  const componentRefs = [sprayPaintRef, colorPaletteRef];\n\n  const handleClickSelection = ({ classList, dataset}) => {\n    dispatch({ type: SET_TOOL, payload: dataset.tool})\n\n    componentRefs.forEach(({ current }) => {\n      current.classList.remove('active');\n    });\n    classList.add('active');\n  }\n\n  const handleColorPickerClick = ({ currentTarget }) => {\n    // TODO: Make this more robust\n    setOpenColorPicker(true);\n    handleClickSelection(currentTarget);\n  }\n\n  const handleNonColorPickerSelection = ({ currentTarget }) => {\n    setOpenColorPicker(false);\n    handleClickSelection(currentTarget);\n  }\n\n  const handleColorChange = (color) => {\n    setColor(color);\n    dispatch({ type: SET_COLOR , payload: color.hex});\n  }\n\n  const handleSave = (e) => {\n    const canvas = document.getElementById(\"canvas\");\n    if (canvas) {\n      const href = canvas.toDataURL();\n      e.currentTarget.href = href;\n    };\n  }\n\n  return (\n    <aside className=\"sidebar-container\">\n      <div className=\"sidebar-controls\">\n        <div className=\"icon drag\">\n          {/* <FontAwesomeIcon icon={faArrowsAlt} size=\"lg\"/> */}\n        </div>\n        <div className=\"icon close\" onClick={() => setMinimized(!minimized)}>\n          <FontAwesomeIcon icon={faMinus} size=\"lg\"/>\n        </div>\n      </div>\n      <div className={`sidebar-main ${minimized ? 'hide' : ''}`}>\n        <div\n          className=\"icon spraypaint\"\n          ref={sprayPaintRef}\n          onClick={handleNonColorPickerSelection}\n          data-tool={SPRAY_PAINT}\n        >\n          <FontAwesomeIcon icon={faSprayCan} size=\"lg\"/>\n        </div>\n        <div\n          className=\"icon color-picker-icon\"\n          ref={colorPaletteRef}\n          onClick={handleColorPickerClick}\n        >\n          <FontAwesomeIcon icon={faPalette} size=\"lg\" />\n          {/* TODO: A little buggy */}\n          <ChromePicker\n            className={`color-picker ${openColorPicker ? 'active' : ''}`}\n            color={color}\n            onChange={handleColorChange}\n          />\n        </div>\n        <a\n          className=\"icon save\"\n          download=\"grafeetee.png\"\n          onClick={handleSave}\n          href=\"/\"\n        >\n          <FontAwesomeIcon icon={faSave} size=\"lg\"/>\n        </a>\n      </div>\n    </aside>\n  )\n}\n\nexport default Sidebar;","import React, { useReducer } from 'react';\nimport Canvas from './Canvas';\nimport Sidebar from './Sidebar';\n\nconst App = () => {\n  // TODO: Refactor this into their own files\n  // Action types\n  const SET_COLOR = 'SETCOLOR';\n  const SET_TOOL = 'SETTOOL';\n\n  // Consts\n  const SPRAY_PAINT = 'SPRAYPAINT';\n\n  const reducer = (state, action) => {\n    Object.freeze(state);\n\n    let nextState = Object.assign({}, state);\n\n    switch(action.type) {\n      case SET_COLOR:\n        nextState.color = action.payload;\n        return nextState;\n      case SET_TOOL:\n        nextState.activeTool = action.payload;\n        return nextState;\n      default:\n        return state;\n    }\n  }\n\n  const initialState = {\n    color: \"#000\",\n    activeTool: SPRAY_PAINT,\n  }\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <section className=\"app-container\">\n      <Sidebar\n        dispatch={dispatch}\n        SET_COLOR={SET_COLOR}\n        SET_TOOL={SET_TOOL}\n        SPRAY_PAINT={SPRAY_PAINT}\n      />\n      <Canvas\n        state={state}\n        SPRAY_PAINT={SPRAY_PAINT}\n      />\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}